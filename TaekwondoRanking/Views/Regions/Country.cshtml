@model TaekwondoRanking.ViewModels.CountryRankingFilterViewModel

@{
    ViewData["Title"] = "Country Rankings";

    var countryList = new SelectList(Model.Countries);
    var ageList = new SelectList(Model.AgeClasses);
    var genderList = new SelectList(Model.Genders);
    var categoryList = new SelectList(Model.Categories);
}

<h2>Country Rankings</h2>

<form method="post" class="mb-4">
    <div class="row mb-2">
        <div class="col-md-3">
            <label for="SelectedCountry">Country</label>
            <select asp-for="SelectedCountry" asp-items="countryList" class="form-control">
                <option value="">-- All --</option>
            </select>
        </div>
        <div class="col-md-3">
            <label for="SelectedAgeClass">Age Class</label>
            <select asp-for="SelectedAgeClass" asp-items="ageList" class="form-control" id="SelectedAgeClass">
                <option value="">-- All --</option>
            </select>
        </div>
        <div class="col-md-3">
            <label for="SelectedGender">Gender</label>
            <select asp-for="SelectedGender" asp-items="genderList" class="form-control" id="SelectedGender">
                <option value="">-- All --</option>
            </select>
        </div>
        <div class="col-md-3">
            <label for="SelectedCategory">Category</label>
            <select asp-for="SelectedCategory" asp-items="categoryList" class="form-control" id="SelectedCategory">
                <option value="">-- All --</option>
            </select>
        </div>
    </div>
    <div class="form-group">
        <button type="submit" name="search" value="search" class="btn btn-primary">Search</button>
        <button type="submit" name="reset" value="reset" class="btn btn-secondary ml-2">Reset</button>
    </div>
</form>

@if (Model.Results != null && Model.Results.Any() && Context.Request.Method == "POST" && Context.Request.Form["search"] == "search")
{
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>#</th>
                <th>Athlete</th>
                <th>Country</th>
                <th>Total Points</th>
            </tr>
        </thead>
        <tbody>
            @{
                int rank = 1;
                foreach (var athlete in Model.Results)
                {
                    <tr>
                        <td>@rank</td>
                        <td>@athlete.Name</td>
                        <td>@athlete.Country</td>
                        <td>@athlete.TotalPoints</td>
                    </tr>
                    rank++;
                }
            }
        </tbody>
    </table>
}
else if (Context.Request.Method == "POST" && Context.Request.Form["search"] == "search")
{
    <p>No results found.</p>
}

<!-- Toast Popup -->
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="warningToast" class="toast align-items-center text-bg-warning border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                Points may be inaccurate for the given country.
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Toast logic
            var toastElement = document.getElementById('warningToast');
            var toast = new bootstrap.Toast(toastElement);
            toast.show();

            // Cascading Category Dropdown Logic
            function updateCategories() {
                const ageClass = document.getElementById("SelectedAgeClass").value;
                const gender = document.getElementById("SelectedGender").value;

                if (ageClass && gender) {
                    fetch(`/Regions/GetCategories?ageClass=${encodeURIComponent(ageClass)}&gender=${encodeURIComponent(gender)}`)
                        .then(response => response.json())
                        .then(data => {
                            const categorySelect = document.getElementById("SelectedCategory");
                            categorySelect.innerHTML = '<option value="">-- All --</option>';
                            data.forEach(category => {
                                const option = document.createElement("option");
                                option.value = category;
                                option.text = category;
                                categorySelect.appendChild(option);
                            });
                        });
                }
            }

            document.getElementById("SelectedAgeClass").addEventListener("change", updateCategories);
            document.getElementById("SelectedGender").addEventListener("change", updateCategories);
        });
    </script>
}
